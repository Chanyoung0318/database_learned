논리 연산자

and = 조건이 모두 참일 때만 값이 출력됨
ex) T + T = T, T + F = F, F + F = F
or = 조건이 하나라도 참일 때만 값이 출력됨
ex) T + T = T, T + F = T, F + F = F
not (!=) = 값이 거짓일 때만 값이 출력 됨

between 연산자

between a and b 는 a,b 를 포함한 사이값을 찾는데 사용한다. (not은 사이값을 제외한 나머지 값)

시간을 검색할 땐 00시00분00초를 기준으로 하기 때문에
between '2004/04/20' and '2007/10/10' 같은 경우엔
2004년 04월 20일 00시00분00초 부터 2007년10월10일 00시00분00초까지 값을 사용


null 값 연산과 변경 함수

null 값을 가지고 연산하면 결과 값이 null이 됨 ex) null + 1 = null
때문에 null값을 다른 값으로 변경해서 연산을 해야함

null값 변경 함수

nvl(컬럼명, 0) 컬럼명이 null 일 때 0을 출력한다. (꼭 0이 아니고 다른 값을 넣어도 됨. 정수 실수만 가능)
nvl2(컬럼명, 'not null', 'null') 컬럼명이 null이 아니면 'not null' 이 출력되고, null이면 'null'이 출력 된다.
(not null, null 자리에 정수, 실수, 문자 다 가능)
decode(컬럼명, null, 0, 컬럼명) 컬럼명이 가지고 있는 값이 null 이면 0, 아니면 컬럼명이 갖고 있는 값이 출력 된다.
(nvl2와 같이 다 가능)

decode는 (컬럼명, 값1, 변경값1, 값2, 변경값2, ... , '나머지경우변경값'); 같이 값을 매핑할 수도 있다.

비슷한 맥락으로 case when 조건식1 then 값1
	   	  when 조건시2 then 값2
		  ......
		  else 나머지 값
		  end (as 별명)
	        from 테이블명;
으로 매핑하여 값을 출력할 수도 있다.

in 연산자

컬럼 (not) in(값1, 값2, 값3) 는 값1,2,3 중 하나를 가지고 있으면 그 값이 출력된다. (not은 반대)

like 연산자

like연산자를 통해 부분 문자열을 이용해서 원하는 문자열을 찾을 수 있다.

부분 문자열에는 %와 _ 가 있다.
%는 문자가 없거나 하나 이상의 어떤 문자가 와도 상관 없다.
_ 는 반드시 하나의 어떤 문자가 와야 할 때 사용된다.

ex) select 컬럼명 from 테이블명 where 컬럼명 (not) like ('문자%'  '%문자'  '%문자%');
    select 컬럼명 from 테이블명 where 컬럼명 (not) like ('문자_'  '_문자'  '_문자_');
(둘다 not은 반대로 출력)


order by 절

검색 결과를 정렬하고 싶을 때 사용된다.
오름차순 = asc , 내림차순 = desc
오름차순의 경우  숫자는 작은것부터, 문자는 사저눈으로, 시간은 과거의시간 먼저 정렬 된다.
null의 경우 오름차순일 때 나중에 나오고 내림차순일 때 먼저 나온다.
ex) select 컬럼명 from 테이블명 (where 조건명) order by 컬럼명 (asc or desc);


create table 만들테이블명 as select 컬럼명 from 테이블명; 을 이용해서 select 결과로 테이블을 만들 수 있다.

